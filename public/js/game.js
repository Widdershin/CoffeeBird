// Generated by CoffeeScript 1.7.1
(function() {
  var game,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  game = null;

  window.main = function() {
    window.requestAnimationFrame(main);
    return game.tick();
  };

  window.onload = function() {
    var Bird, Game, GameObject, Key, Pipe, birdSprite, gameStarted, gameStarter, gravity, pipeSprite;
    window.addEventListener('keyup', (function(event) {
      return Key.onKeyup(event);
    }), false);
    window.addEventListener('keydown', (function(event) {
      return Key.onKeydown(event);
    }), false);
    gravity = 0.1;
    Game = (function() {
      function Game() {}

      Game.prototype.start = function() {
        this.bird = new Bird(birdSprite, 60, 200);
        this.pipes = [];
        this.width = 600;
        this.height = 400;
        this.pipeSpawnTime = 200;
        return this.timeToPipeSpawn = 0;
      };

      Game.prototype.tick = function() {
        this.update();
        return this.draw();
      };

      Game.prototype.update = function() {
        var pipe, _i, _len, _ref, _results;
        this.timeToPipeSpawn--;
        if (this.timeToPipeSpawn <= 0) {
          this.spawnPipe();
          this.timeToPipeSpawn = this.pipeSpawnTime;
        }
        this.bird.update();
        this.pipeAt(this.bird.x, this.bird.y);
        _ref = this.pipes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          pipe = _ref[_i];
          _results.push(pipe.update());
        }
        return _results;
      };

      Game.prototype.draw = function() {
        var ctx, pipe, _i, _len, _ref, _results;
        ctx = document.getElementById('canvas').getContext('2d');
        ctx.fillStyle = 'white';
        ctx.fillRect(0, 0, this.width, this.height);
        this.bird.draw(ctx);
        _ref = this.pipes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          pipe = _ref[_i];
          _results.push(pipe.draw(ctx));
        }
        return _results;
      };

      Game.prototype.pipeAt = function(x, y) {
        var ctx, pipe, _i, _len, _ref, _results;
        _ref = this.pipes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          pipe = _ref[_i];
          if ((pipe.x - 24 < x && x < pipe.x + 24) && Math.abs(pipe.y - y) > pipe.gap / 2) {
            console.log('collision');
            ctx = document.getElementById('canvas').getContext('2d');
            _results.push(ctx.fillRect(x - 5, y - 5, 10, 10));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      };

      Game.prototype.spawnPipe = function() {
        var pipe;
        pipe = new Pipe(pipeSprite);
        pipe.x = this.width;
        pipe.y = 100 + (Math.random() * 200);
        return this.pipes.push(pipe);
      };

      return Game;

    })();
    GameObject = (function() {
      function GameObject(sprite, x, y) {
        if (x == null) {
          x = 0;
        }
        if (y == null) {
          y = 0;
        }
        this.sprite = sprite;
        this.x = x;
        this.y = y;
        this.width = sprite.naturalWidth;
        this.height = sprite.naturalHeight;
        this.spriteOffsetX = -(this.width / 2);
        this.spriteOffsetY = -(this.height / 2);
      }

      GameObject.prototype.draw = function(ctx) {
        ctx.drawImage(this.sprite, this.x + this.spriteOffsetX, this.y + this.spriteOffsetY);
        ctx.fillStyle = 'red';
        return ctx.fillRect(this.x - 1, this.y - 1, 2, 2);
      };

      return GameObject;

    })();
    Bird = (function(_super) {
      __extends(Bird, _super);

      function Bird(sprite, x, y) {
        if (x == null) {
          x = 15;
        }
        if (y == null) {
          y = 15;
        }
        Bird.__super__.constructor.call(this, sprite, x, y);
        this.vAccel = 0;
        this.flapAccel = -5;
        this.canFlap = true;
      }

      Bird.prototype.update = function() {
        if (Key.isDown(Key.JUMP)) {
          this.flap();
          this.canFlap = false;
        } else {
          this.canFlap = true;
        }
        this.vAccel += gravity;
        return this.y += this.vAccel;
      };

      Bird.prototype.flap = function() {
        if (this.canFlap) {
          return this.vAccel = this.flapAccel;
        }
      };

      return Bird;

    })(GameObject);
    Pipe = (function(_super) {
      __extends(Pipe, _super);

      function Pipe(sprite, x, y) {
        if (x == null) {
          x = 0;
        }
        if (y == null) {
          y = 0;
        }
        Pipe.__super__.constructor.call(this, sprite, x, y);
        this.gap = 85;
        this.spriteOffsetY += 25;
      }

      Pipe.prototype.update = function() {
        return this.x -= 2;
      };

      Pipe.prototype.draw = function(ctx) {
        Pipe.__super__.draw.call(this, ctx);
        ctx.fillStyle = 'red';
        ctx.beginPath();
        ctx.rect(this.x - 24, this.y - this.gap / 2, 48, this.gap);
        ctx.lineWidth = 3;
        ctx.strokeStyle = 'black';
        return ctx.stroke();
      };

      return Pipe;

    })(GameObject);
    Key = {
      _pressed: {},
      JUMP: 32,
      isDown: function(keyCode) {
        return this._pressed[keyCode];
      },
      onKeydown: function(event) {
        return this._pressed[event.keyCode] = true;
      },
      onKeyup: function(event) {
        return delete this._pressed[event.keyCode];
      }
    };
    game = new Game();
    birdSprite = new Image();
    birdSprite.src = 'public/img/bird.jpg';
    pipeSprite = new Image();
    pipeSprite.src = 'public/img/pipe2.png';
    gameStarted = false;
    gameStarter = function(event) {
      if (event.keyCode === 32 && !gameStarted) {
        console.log("starting game");
        game.start();
        main();
        return gameStarted = true;
      }
    };
    return window.addEventListener('keydown', (function(event) {
      return gameStarter(event);
    }), false);
  };

}).call(this);
